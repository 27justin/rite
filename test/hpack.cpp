#include <gtest/gtest.h>

#include <string>
#include <vector>
#include <print>
#include <format>

#include <protocols/h2.hpp>
#include <protocols/h2/headers.hpp>
#include <protocols/h2/hpack.hpp>

h2::frame
frame(const std::string &payload, bool end) {
    h2::frame frame;
    frame.length = payload.size();
    frame.type = h2::frame::HEADERS;
    if (end)
        frame.flags = h2::frame::characteristics<h2::frame::HEADERS>::END_HEADERS;
    frame.stream_identifier = 0;
    frame.data = std::vector<std::byte>((std::byte *)payload.data(), (std::byte *)(payload.data() + payload.size()));
    return frame;
}

h2::hpack::header
get(const std::string &key, const h2::hpack::headers &headers) {
    for (auto const &header : headers) {
        if (header.key == key)
            return header;
    }
    throw std::runtime_error(std::format("header '{}' not found", key));
}

TEST(HPack, FirefoxSingle) {
    const char  PAYLOAD_DATA[]{ "\x82\x04\x81\x63\x41\x8a\xa0\xe4\x1d\x13\x9d\x09\xb8\x20\x01\x9f\x87\x7a\xb5\xd0\x7f\x66\xa2\x81\xb0\xda\xe0\x53\xfa\xfc\x08\x7e\xd4\xce\x6a\xad\xf2\xa7\x97\x9c\x89"
                                 "\xc6\xbe\xd4\xb3\xbd\xc0\xb2\xca\xe0\xfe\xd4\xc4\x52\x75\x3b\x02\x00\x40\x00\x80\x2a\x61\x35\x85\x94\xfe\x58\x0b\x2c\xae\x0f\x53\xb0\x49\x7c\xa5\x89\xd3\x4d\x1f\x43"
                                 "\xae\xba\x0c\x41\xa4\xc7\xa9\x8f\x33\xa6\x9a\x3f\xdf\x9a\x68\xfa\x1d\x75\xd0\x62\x0d\x26\x3d\x4c\x79\xa6\x8f\xbe\xd0\x01\x77\xfe\xbe\x58\xf9\xfb\xed\x00\x17\x7b\x51"
                                 "\x93\x90\xbf\x45\xa9\x6e\x1b\xbe\xfb\x40\x05\xdd\xfa\x2d\x5f\x7d\xa0\x02\xec\xff\x50\x92\x9b\xd9\xab\xfa\x52\x42\xcb\x40\xd2\x5f\xa5\x23\xb3\xe9\x4f\x68\x4c\x9f\x40"
                                 "\x83\x92\xa4\xff\x81\x0f\x40\x92\xb6\xb9\xac\x1c\x85\x58\xd5\x20\xa4\xb6\xc2\xad\x61\x7b\x5a\x54\x25\x1f\x81\x0f\x40\x8a\x41\x48\xb4\xa5\x49\x27\x5a\x42\xa1\x3f\x86"
                                 "\x90\xe4\xb6\x92\xd4\x9f\x40\x8a\x41\x48\xb4\xa5\x49\x27\x5a\x93\xc8\x5f\x86\xa8\x7d\xcd\x30\xd2\x5f\x40\x8a\x41\x48\xb4\xa5\x49\x27\x59\x06\x49\x7f\x83\xa8\xf5\x17"
                                 "\x40\x8a\x41\x48\xb4\xa5\x49\x27\x5a\xd4\x16\xcf\x82\xff\x03\x40\x86\xae\xc3\x1e\xc3\x27\xd7\x85\xb6\x00\x7d\x28\x6f\x40\x82\x49\x7f\x86\x4d\x83\x35\x05\xb1\x1f" };
    std::string PAYLOAD(PAYLOAD_DATA, sizeof(PAYLOAD_DATA) - 1);

    parser<h2::hpack> hpack;
    hpack.parse(frame(PAYLOAD, true));

    auto headers = hpack.result();
    EXPECT_EQ(headers.size(), 16);
    EXPECT_EQ("/", get(":path", headers).value);
    EXPECT_EQ("localhost:2003", get(":authority", headers).value);
    EXPECT_EQ("https", get(":scheme", headers).value);
    EXPECT_EQ("Mozilla/5.0 (X11; Linux x86_64; rv:133.0) Gecko/20100101 Firefox/133.0", get("user-agent", headers).value);
    EXPECT_EQ("text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8", get("accept", headers).value);
    EXPECT_EQ("de,en-US;q=0.7,en;q=0.3", get("accept-language", headers).value);
    EXPECT_EQ("gzip, deflate, br, zstd", get("accept-encoding", headers).value);
    EXPECT_EQ("1", get("dnt", headers).value);
    EXPECT_EQ("1", get("upgrade-insecure-requests", headers).value);
    EXPECT_EQ("document", get("sec-fetch-dest", headers).value);
    EXPECT_EQ("navigate", get("sec-fetch-mode", headers).value);
    EXPECT_EQ("none", get("sec-fetch-site", headers).value);
    EXPECT_EQ("?1", get("sec-fetch-user", headers).value);
    EXPECT_EQ("u=0, i", get("priority", headers).value);
    EXPECT_EQ("trailers", get("te", headers).value);
}

TEST(HPack, FirefoxCachedHeaders) {
    const char PAYLOAD_START_DATA[] =
      "\x82\x04\x81\x63\x41\x8a\xa0\xe4\x1d\x13\x9d\x09\xb8\x20\x01\x9f\x87\x7a\xb5\xd0\x7f\x66\xa2\x81\xb0\xda\xe0\x53\xfa\xfc\x08\x7e\xd4\xce\x6a\xad\xf2\xa7\x97\x9c\x89\xc6\xbe\xd4\xb3\xbd\xc0\xb2"
      "\xca\xe0\xfe\xd4\xc4\x52\x75\x3b\x02\x00\x40\x00\x80\x2a\x61\x35\x85\x94\xfe\x58\x0b\x2c\xae\x0f\x53\xb0\x49\x7c\xa5\x89\xd3\x4d\x1f\x43\xae\xba\x0c\x41\xa4\xc7\xa9\x8f\x33\xa6\x9a\x3f\xdf\x9a"
      "\x68\xfa\x1d\x75\xd0\x62\x0d\x26\x3d\x4c\x79\xa6\x8f\xbe\xd0\x01\x77\xfe\xbe\x58\xf9\xfb\xed\x00\x17\x7b\x51\x93\x90\xbf\x45\xa9\x6e\x1b\xbe\xfb\x40\x05\xdd\xfa\x2d\x5f\x7d\xa0\x02\xec\xff\x50"
      "\x92\x9b\xd9\xab\xfa\x52\x42\xcb\x40\xd2\x5f\xa5\x23\xb3\xe9\x4f\x68\x4c\x9f\x40\x83\x92\xa4\xff\x81\x0f\x40\x92\xb6\xb9\xac\x1c\x85\x58\xd5\x20\xa4\xb6\xc2\xad\x61\x7b\x5a\x54\x25\x1f\x81\x0f"
      "\x40\x8a\x41\x48\xb4\xa5\x49\x27\x5a\x42\xa1\x3f\x86\x90\xe4\xb6\x92\xd4\x9f\x40\x8a\x41\x48\xb4\xa5\x49\x27\x5a\x93\xc8\x5f\x86\xa8\x7d\xcd\x30\xd2\x5f\x40\x8a\x41\x48\xb4\xa5\x49\x27\x59\x06"
      "\x49\x7f\x83\xa8\xf5\x17\x40\x8a\x41\x48\xb4\xa5\x49\x27\x5a\xd4\x16\xcf\x82\xff\x03\x40\x86\xae\xc3\x1e\xc3\x27\xd7\x85\xb6\x00\x7d\x28\x6f\x40\x82\x49\x7f\x86\x4d\x83\x35\x05\xb1\x1f";
    std::string PAYLOAD_START(PAYLOAD_START_DATA, sizeof(PAYLOAD_START_DATA) - 1);

    const char  PAYLOAD_SUBSEQUENT_DATA[] = "\x82\x04\x81\x63\xca\x87\xc9\xc8\xc7\xc6\xc5\xc4\xc3\xc2\xc1\xc0\xbf\xbe";
    std::string PAYLOAD_SUBSEQUENT(PAYLOAD_SUBSEQUENT_DATA, sizeof(PAYLOAD_SUBSEQUENT_DATA) - 1);

    parser<h2::hpack> hpack;
    EXPECT_EQ(hpack.parse(frame(PAYLOAD_START, true)), h2::hpack::error::eDone);

    // Discard current result
    auto headers = hpack.result();

    EXPECT_EQ(hpack.parse(frame(PAYLOAD_SUBSEQUENT, true)), h2::hpack::error::eDone);

    headers = hpack.result();
    EXPECT_EQ(headers.size(), 16);
    EXPECT_EQ("/", get(":path", headers).value);
    EXPECT_EQ("localhost:2003", get(":authority", headers).value);
    EXPECT_EQ("https", get(":scheme", headers).value);
    EXPECT_EQ("Mozilla/5.0 (X11; Linux x86_64; rv:133.0) Gecko/20100101 Firefox/133.0", get("user-agent", headers).value);
    EXPECT_EQ("text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8", get("accept", headers).value);
    EXPECT_EQ("de,en-US;q=0.7,en;q=0.3", get("accept-language", headers).value);
    EXPECT_EQ("gzip, deflate, br, zstd", get("accept-encoding", headers).value);
    EXPECT_EQ("1", get("dnt", headers).value);
    EXPECT_EQ("1", get("upgrade-insecure-requests", headers).value);
    EXPECT_EQ("document", get("sec-fetch-dest", headers).value);
    EXPECT_EQ("navigate", get("sec-fetch-mode", headers).value);
    EXPECT_EQ("none", get("sec-fetch-site", headers).value);
    EXPECT_EQ("?1", get("sec-fetch-user", headers).value);
    EXPECT_EQ("u=0, i", get("priority", headers).value);
    EXPECT_EQ("trailers", get("te", headers).value);
}


TEST(HPack, ChromiumSingle) {
    const char  PAYLOAD_DATA[]{ "\x82\x41\x8a\xa0\xe4\x1d\x13\x9d\x09\xb8\x20\x01\x9f\x87\x84\x58\x87\xa4\x7e\x56\x1c\xc5\x80\x1f\x40\x87\x41\x48\xb1\x27\x5a\xd1\xff\xa3\xfe\x6f\x4f\x61\xe9\x35\xb4\xff\x3f\x7d\xe0\xfe\x42\xc8\x7f\x9f\xa5\x3f\x9d\x27\x4c\x50\xa9\x76\xc1\xd5\x27\xf3\xf7\xde\x0f\xe4\x4d\x7f\x3f\x40\x8b\x41\x48\xb1\x27\x5a\xd1\xad\x49\xe3\x35\x05\x02\x3f\x30\x40\x8d\x41\x48\xb1\x27\x5a\xd1\xad\x5d\x03\x4c\xa7\xb2\x9f\x07\x22\x4c\x69\x6e\x75\x78\x22\x40\x92\xb6\xb9\xac\x1c\x85\x58\xd5\x20\xa4\xb6\xc2\xad\x61\x7b\x5a\x54\x25\x1f\x01\x31\x7a\xce\xd0\x7f\x66\xa2\x81\xb0\xda\xe0\x53\xfa\xfc\x08\x7e\xd4\xce\x6a\xad\xf2\xa7\x97\x9c\x89\xc6\xbf\xb5\x21\xae\xba\x0b\xc8\xb1\xe6\x32\x58\x6d\x97\x57\x65\xc5\x3f\xac\xd8\xf7\xe8\xcf\xf4\xa5\x06\xea\x55\x31\x14\x9d\x4f\xfd\xa9\x7a\x7b\x0f\x49\x58\x0b\x21\x5c\x0b\x81\x70\x29\xb8\x72\x8e\xc3\x30\xdb\x2e\xae\xcb\x9f\x53\xe5\x49\x7c\xa5\x89\xd3\x4d\x1f\x43\xae\xba\x0c\x41\xa4\xc7\xa9\x8f\x33\xa6\x9a\x3f\xdf\x9a\x68\xfa\x1d\x75\xd0\x62\x0d\x26\x3d\x4c\x79\xa6\x8f\xbe\xd0\x01\x77\xfe\x8d\x48\xe6\x2b\x03\xee\x69\x7e\x8d\x48\xe6\x2b\x1e\x0b\x1d\x7f\x46\xa4\x73\x15\x81\xd7\x54\xdf\x5f\x2c\x7c\xfd\xf6\x80\x0b\xbd\xf4\x3a\xeb\xa0\xc4\x1a\x4c\x7a\x98\x41\xa6\xa8\xb2\x2c\x5f\x24\x9c\x75\x4c\x5f\xbe\xf0\x46\xcf\xdf\x68\x00\xbb\xbf\x40\x8a\x41\x48\xb4\xa5\x49\x27\x59\x06\x49\x7f\x87\x25\x87\x42\x16\x41\x92\x5f\x40\x8a\x41\x48\xb4\xa5\x49\x27\x5a\x93\xc8\x5f\x86\xa8\x7d\xcd\x30\xd2\x5f\x40\x8a\x41\x48\xb4\xa5\x49\x27\x5a\xd4\x16\xcf\x02\x3f\x31\x40\x8a\x41\x48\xb4\xa5\x49\x27\x5a\x42\xa1\x3f\x86\x90\xe4\xb6\x92\xd4\x9f\x50\x92\x9b\xd9\xab\xfa\x52\x42\xcb\x40\xd2\x5f\xa5\x23\xb3\xe9\x4f\x68\x4c\x9f\x51\x9c\x90\xab\x5f\xc1\xf5\x21\x7e\xfb\x40\x05\xdf\xfa\x2d\x4b\x70\xdd\xf7\xda\x00\x2e\xf7\xd1\x6a\xfb\xed\x00\x17\x77\x40\x86\xae\xc3\x1e\xc3\x27\xd7\x85\xb6\x00\x7d\x28\x6f" };
    std::string PAYLOAD(PAYLOAD_DATA, sizeof(PAYLOAD_DATA) - 1);

    parser<h2::hpack> hpack;
    hpack.parse(frame(PAYLOAD, true));

    auto headers = hpack.result();

    EXPECT_EQ(headers.size(), 18);
    EXPECT_EQ("/", get(":path", headers).value);
    EXPECT_EQ("localhost:2003", get(":authority", headers).value);
    EXPECT_EQ("https", get(":scheme", headers).value);
    EXPECT_EQ("GET", get(":method", headers).value);
    EXPECT_EQ("max-age=0", get("cache-control", headers).value);
    EXPECT_EQ("\"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"", get("sec-ch-ua", headers).value);
    EXPECT_EQ("?0", get("sec-ch-ua-mobile", headers).value);
    EXPECT_EQ("\"Linux\"", get("sec-ch-ua-platform", headers).value);
    EXPECT_EQ("1", get("upgrade-insecure-requests", headers).value);
    EXPECT_EQ("Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36", get("user-agent", headers).value);
    EXPECT_EQ("text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7", get("accept", headers).value);
    EXPECT_EQ("cross-site", get("sec-fetch-site", headers).value);
    EXPECT_EQ("navigate", get("sec-fetch-mode", headers).value);
    EXPECT_EQ("?1", get("sec-fetch-user", headers).value);
    EXPECT_EQ("document", get("sec-fetch-dest", headers).value);
    EXPECT_EQ("gzip, deflate, br, zstd", get("accept-encoding", headers).value);
    EXPECT_EQ("de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7", get("accept-language", headers).value);
    EXPECT_EQ("u=0, i", get("priority", headers).value);
}

TEST(HPack, ChromiumCachedHeaders) {
    const char PAYLOAD_START_DATA[] = "\x82\x41\x8a\xa0\xe4\x1d\x13\x9d\x09\xb8\x20\x01\x9f\x87\x84\x58\x87\xa4\x7e\x56\x1c\xc5\x80\x1f\x40\x87\x41\x48\xb1\x27\x5a\xd1\xff\xa3\xfe\x6f\x4f\x61\xe9\x35\xb4\xff\x3f\x7d\xe0\xfe\x42\xc8\x7f\x9f\xa5\x3f\x9d\x27\x4c\x50\xa9\x76\xc1\xd5\x27\xf3\xf7\xde\x0f\xe4\x4d\x7f\x3f\x40\x8b\x41\x48\xb1\x27\x5a\xd1\xad\x49\xe3\x35\x05\x02\x3f\x30\x40\x8d\x41\x48\xb1\x27\x5a\xd1\xad\x5d\x03\x4c\xa7\xb2\x9f\x07\x22\x4c\x69\x6e\x75\x78\x22\x40\x92\xb6\xb9\xac\x1c\x85\x58\xd5\x20\xa4\xb6\xc2\xad\x61\x7b\x5a\x54\x25\x1f\x01\x31\x7a\xce\xd0\x7f\x66\xa2\x81\xb0\xda\xe0\x53\xfa\xfc\x08\x7e\xd4\xce\x6a\xad\xf2\xa7\x97\x9c\x89\xc6\xbf\xb5\x21\xae\xba\x0b\xc8\xb1\xe6\x32\x58\x6d\x97\x57\x65\xc5\x3f\xac\xd8\xf7\xe8\xcf\xf4\xa5\x06\xea\x55\x31\x14\x9d\x4f\xfd\xa9\x7a\x7b\x0f\x49\x58\x0b\x21\x5c\x0b\x81\x70\x29\xb8\x72\x8e\xc3\x30\xdb\x2e\xae\xcb\x9f\x53\xe5\x49\x7c\xa5\x89\xd3\x4d\x1f\x43\xae\xba\x0c\x41\xa4\xc7\xa9\x8f\x33\xa6\x9a\x3f\xdf\x9a\x68\xfa\x1d\x75\xd0\x62\x0d\x26\x3d\x4c\x79\xa6\x8f\xbe\xd0\x01\x77\xfe\x8d\x48\xe6\x2b\x03\xee\x69\x7e\x8d\x48\xe6\x2b\x1e\x0b\x1d\x7f\x46\xa4\x73\x15\x81\xd7\x54\xdf\x5f\x2c\x7c\xfd\xf6\x80\x0b\xbd\xf4\x3a\xeb\xa0\xc4\x1a\x4c\x7a\x98\x41\xa6\xa8\xb2\x2c\x5f\x24\x9c\x75\x4c\x5f\xbe\xf0\x46\xcf\xdf\x68\x00\xbb\xbf\x40\x8a\x41\x48\xb4\xa5\x49\x27\x59\x06\x49\x7f\x87\x25\x87\x42\x16\x41\x92\x5f\x40\x8a\x41\x48\xb4\xa5\x49\x27\x5a\x93\xc8\x5f\x86\xa8\x7d\xcd\x30\xd2\x5f\x40\x8a\x41\x48\xb4\xa5\x49\x27\x5a\xd4\x16\xcf\x02\x3f\x31\x40\x8a\x41\x48\xb4\xa5\x49\x27\x5a\x42\xa1\x3f\x86\x90\xe4\xb6\x92\xd4\x9f\x50\x92\x9b\xd9\xab\xfa\x52\x42\xcb\x40\xd2\x5f\xa5\x23\xb3\xe9\x4f\x68\x4c\x9f\x51\x9c\x90\xab\x5f\xc1\xf5\x21\x7e\xfb\x40\x05\xdf\xfa\x2d\x4b\x70\xdd\xf7\xda\x00\x2e\xf7\xd1\x6a\xfb\xed\x00\x17\x77\x40\x86\xae\xc3\x1e\xc3\x27\xd7\x85\xb6\x00\x7d\x28\x6f";
    std::string PAYLOAD_START(PAYLOAD_START_DATA, sizeof(PAYLOAD_START_DATA) - 1);

    const char  PAYLOAD_SUBSEQUENT_DATA[] = "\x82\xcc\x87\x04\x89\x62\x51\xf7\x31\x0f\x52\xe6\x21\xff\xc8\xc6\xca\xc9\x53\xb1\x35\x23\x98\xac\x0f\xb9\xa5\xfa\x35\x23\x98\xac\x78\x2c\x75\xfd\x1a\x91\xcc\x56\x07\x5d\x53\x7d\x1a\x91\xcc\x56\x11\xde\x6f\xf7\xe6\x9a\x3e\x8d\x48\xe6\x2b\x1f\x3f\x5f\x2c\x7c\xfd\xf6\x80\x0b\xbd\x7f\x06\x88\x40\xe9\x2a\xc7\xb0\xd3\x1a\xaf\x7f\x06\x85\xa8\xeb\x10\xf6\x23\x7f\x05\x84\x35\x23\x98\xbf\x73\x90\x9d\x29\xad\x17\x18\x62\x83\x90\x74\x4e\x74\x26\xe0\x80\x06\x58\xc5\xc4\x7f\x04\x85\xb6\x00\xfd\x28\x6f";
    std::string PAYLOAD_SUBSEQUENT(PAYLOAD_SUBSEQUENT_DATA, sizeof(PAYLOAD_SUBSEQUENT_DATA) - 1);

    parser<h2::hpack> hpack;
    EXPECT_EQ(hpack.parse(frame(PAYLOAD_START, true)), h2::hpack::error::eDone);

    // Discard current result
    auto headers = hpack.result();
    EXPECT_EQ(hpack.parse(frame(PAYLOAD_SUBSEQUENT, true)), h2::hpack::error::eDone);

    headers = hpack.result();

    EXPECT_EQ(headers.size(), 16);
    EXPECT_EQ("/favicon.ico", get(":path", headers).value);
    EXPECT_EQ("localhost:2003", get(":authority", headers).value);
    EXPECT_EQ("https", get(":scheme", headers).value);
    EXPECT_EQ("GET", get(":method", headers).value);
    EXPECT_EQ("\"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"", get("sec-ch-ua", headers).value);
    EXPECT_EQ("?0", get("sec-ch-ua-mobile", headers).value);
    EXPECT_EQ("\"Linux\"", get("sec-ch-ua-platform", headers).value);
    EXPECT_EQ("Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36", get("user-agent", headers).value);
    EXPECT_EQ("image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8", get("accept", headers).value);
    EXPECT_EQ("same-origin", get("sec-fetch-site", headers).value);
    EXPECT_EQ("no-cors", get("sec-fetch-mode", headers).value);
    EXPECT_EQ("image", get("sec-fetch-dest", headers).value);
    EXPECT_EQ("gzip, deflate, br, zstd", get("accept-encoding", headers).value);
    EXPECT_EQ("de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7", get("accept-language", headers).value);
    EXPECT_EQ("u=1, i", get("priority", headers).value);
}

TEST(HPack, FailsOnInvalidIndex) {
    const char PAYLOAD_DATA[] =
      "\x82\xff\xff\xff";
    std::string PAYLOAD(PAYLOAD_DATA, sizeof(PAYLOAD_DATA) - 1);

    parser<h2::hpack> hpack;
    // Test for eUnknownHeader, 0xFF counts as though an indexed header.
    EXPECT_EQ(hpack.parse(frame(PAYLOAD, true)), h2::hpack::error::eUnknownHeader);
}

TEST(HPack, FailsOnGibberish) {
    const char PAYLOAD_DATA[] =
      "\x82\x00\xff\xf0\x7f";
    std::string PAYLOAD(PAYLOAD_DATA, sizeof(PAYLOAD_DATA) - 1);

    parser<h2::hpack> hpack;
    // Test for eUnknownHeader, 0xFF counts as though an indexed header.
    EXPECT_EQ(hpack.parse(frame(PAYLOAD, true)), h2::hpack::error::eInvalid);
}
